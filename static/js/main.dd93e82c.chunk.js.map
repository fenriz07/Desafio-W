{"version":3,"sources":["assets/img/logo.svg","componets/SearchBar/index.js","api/search/index.js","componets/Product/index.js","page/Home/index.js","layout/Base/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","SearchBar","props","refTime","useRef","refInput","setProducts","className","Form","Control","type","placeholder","name","onKeyUp","e","current","clearTimeout","setTimeout","text","body","search","params","method","headers","JSON","stringify","fetch","then","response","status","json","result","catch","err","Search","value","products","console","log","ref","Product","product","description","brand","price","Home","listProducts","componetsRender","size","Row","chunk","map","index","push","key","indexp","Col","md","printProducts","Container","Base","useState","fluid","src","logo","alt","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"sFAAAA,EAAOC,QAAU,IAA0B,kC,wRCK5B,SAASC,EAAUC,GAChC,IAAMC,EAAUC,iBAAO,MAEjBC,EAAWD,iBAAO,MAEhBE,EAAgBJ,EAAhBI,YAmBR,OACE,yBAAKC,UAAU,aACb,kBAACC,EAAA,EAAD,KACE,kBAACA,EAAA,EAAKC,QAAN,CACEC,KAAK,OACLC,YAAY,gCACZC,KAAK,aACLC,QAxBS,SAACC,GACZX,EAAQY,SACVC,aAAab,EAAQY,SAGvBZ,EAAQY,QAAUE,YAAW,YCjB1B,SAAgBC,GACrB,IACMC,EAAO,CACXC,OAAQF,GAGJG,EAAS,CACbC,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBJ,KAAMK,KAAKC,UAAUN,IAGvB,OAAOO,MAbK,+BAaML,GACfM,MAAK,SAACC,GACL,OAAwB,MAApBA,EAASC,OACJD,EAASE,OACa,MAApBF,EAASC,OACX,QADF,KAIRF,MAAK,SAACI,GACL,OAAOA,KAERC,OAAM,SAACC,GACN,OAAOA,MDRPC,CAAO7B,EAASU,QAAQoB,OACrBR,MAAK,SAACS,GACLC,QAAQC,IAAIF,GACZ9B,EAAY8B,MAEbJ,OAAM,WACLK,QAAQC,IAAI,6BAEf,MAWGC,IAAKlC,M,wBEnCA,SAASmC,EAAQtC,GAAQ,IAC9BuC,EAAYvC,EAAZuC,QAER,OACE,yBAAKlC,UAAU,qBACb,6CAAgBkC,EAAQC,aACxB,qCAAWD,EAAQE,OACnB,yCAAeF,EAAQG,Q,iBCHd,SAASC,EAAK3C,GAAQ,IAG7B4C,EAKR,SAAuBV,GACrB,IAAIW,EAAkB,GAEtB,OAAuB,IAAnBC,eAAKZ,GAEL,kBAACa,EAAA,EAAD,KACE,gDAIgBC,gBAAMd,EAAU,GAEtBe,KAAI,SAACf,EAAUgB,GAC3BL,EAAgBM,KACd,kBAACJ,EAAA,EAAD,CAAKK,IAAKF,GACPhB,EAASe,KAAI,SAACV,EAASc,GACtB,OACE,kBAACC,EAAA,EAAD,CAAKC,GAAI,EAAGH,IAAKC,GACf,kBAAC,EAAD,CAASD,IAAKC,EAAQd,QAASA,aAQpCM,GA/BYW,CAFAxD,EAAbkC,UAIR,OAAO,kBAACuB,EAAA,EAAD,CAAWpD,UAAU,aAAauC,GCH5B,SAASc,IAAQ,IAAD,EACGC,mBAAS,MADZ,mBACtBzB,EADsB,KACZ9B,EADY,KAG7B,OACE,kBAACqD,EAAA,EAAD,CAAWG,OAAK,GACd,kBAACb,EAAA,EAAD,CAAK1C,UAAU,cACb,yBAAKA,UAAU,QACb,yBAAKwD,IAAKC,IAAMC,IAAI,gBAEtB,kBAAC,EAAD,CAAW3D,YAAaA,KAE1B,kBAAC2C,EAAA,EAAD,CAAK1C,UAAU,aACb,kBAAC,EAAD,CAAM6B,SAAUA,MCjBT,SAAS8B,IACtB,OAAO,kBAACN,EAAD,M,MCQWO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAO,kBAACP,EAAD,MAASQ,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnD,MAAK,SAAAoD,GACJA,EAAaC,gBAEdhD,OAAM,SAAAiD,GACL5C,QAAQ4C,MAAMA,EAAMC,c","file":"static/js/main.dd93e82c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ec00ef3d.svg\";","import React, { useRef } from \"react\";\nimport { Form } from \"react-bootstrap\";\nimport { Search } from \"../../api/search\";\nimport \"./index.scss\";\n\nexport default function SearchBar(props) {\n  const refTime = useRef(null);\n\n  const refInput = useRef(null);\n\n  const { setProducts } = props;\n\n  const onChange = (e) => {\n    if (refTime.current) {\n      clearTimeout(refTime.current);\n    }\n\n    refTime.current = setTimeout(() => {\n      Search(refInput.current.value)\n        .then((products) => {\n          console.log(products);\n          setProducts(products);\n        })\n        .catch(() => {\n          console.log(\"error en el servidor\");\n        });\n    }, 500);\n  };\n\n  return (\n    <div className=\"SearchBar\">\n      <Form>\n        <Form.Control\n          type=\"text\"\n          placeholder=\"¿Qué estás buscando?\"\n          name=\"searchtext\"\n          onKeyUp={onChange}\n          ref={refInput}\n        />\n      </Form>\n    </div>\n  );\n}\n","export function Search(text) {\n  const url = \"http://localhost:8080/search\";\n  const body = {\n    search: text,\n  };\n\n  const params = {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify(body),\n  };\n\n  return fetch(url, params)\n    .then((response) => {\n      if (response.status === 201) {\n        return response.json();\n      } else if (response.status === 204) {\n        return [];\n      }\n    })\n    .then((result) => {\n      return result;\n    })\n    .catch((err) => {\n      return err;\n    });\n}\n","import React from \"react\";\nimport \"./index.scss\";\nexport default function Product(props) {\n  const { product } = props;\n\n  return (\n    <div className=\"container-product\">\n      <p>Descripción:{product.description}</p>\n      <p>Marca: {product.brand}</p>\n      <span>Precio: {product.price}</span>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { Container, Row, Col } from \"react-bootstrap\";\nimport Product from \"../../componets/Product\";\nimport \"./index.scss\";\nimport { chunk, size } from \"lodash\";\n\nexport default function Home(props) {\n  const { products } = props;\n\n  const listProducts = printProducts(products);\n\n  return <Container className=\"page-home\">{listProducts}</Container>;\n}\n\nfunction printProducts(products) {\n  let componetsRender = [];\n\n  if (size(products) === 0) {\n    return (\n      <Row>\n        <h1>Sin resultados</h1>\n      </Row>\n    );\n  } else {\n    let chunkProducts = chunk(products, 3);\n\n    chunkProducts.map((products, index) => {\n      componetsRender.push(\n        <Row key={index}>\n          {products.map((product, indexp) => {\n            return (\n              <Col md={4} key={indexp}>\n                <Product key={indexp} product={product} />\n              </Col>\n            );\n          })}\n        </Row>\n      );\n    });\n\n    return componetsRender;\n  }\n} /*\n<Row>\n<Col md={4}>\n  <Product />\n</Col>\n<Col md={4}>\n  <Product />\n</Col>\n<Col md={4}>\n  <Product />\n</Col>\n</Row>*/\n","import React, { useState } from \"react\";\nimport { Container, Row } from \"react-bootstrap\";\nimport logo from \"../../assets/img/logo.svg\";\nimport SearchBar from \"../../componets/SearchBar\";\nimport \"./base.scss\";\n\nimport Home from \"../../page/Home\";\n\nexport default function Base() {\n  const [products, setProducts] = useState(null);\n\n  return (\n    <Container fluid>\n      <Row className=\"header-bar\">\n        <div className=\"logo\">\n          <img src={logo} alt=\"lider-logo\" />\n        </div>\n        <SearchBar setProducts={setProducts} />\n      </Row>\n      <Row className=\"page-area\">\n        <Home products={products} />\n      </Row>\n    </Container>\n  );\n}\n","import React from \"react\";\nimport BaseLayout from \"./layout/Base\";\n\nexport default function App() {\n  return <BaseLayout />;\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}